# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from swarmtal_msgs/drone_onboard_command.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class drone_onboard_command(genpy.Message):
  _md5sum = "a5ca6aa226dc341da2ea852d685b0336"
  _type = "swarmtal_msgs/drone_onboard_command"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 CTRL_POS_COMMAND=0
uint32 CTRL_VEL_COMMAND=1
uint32 CTRL_ATT_COMMAND=2
uint32 CTRL_MISSION_LOAD_COMMAND=3
uint32 CTRL_MISSION_END_COMMAND=4
uint32 CTRL_TAKEOF_COMMAND=5
uint32 CTRL_LANDING_COMMAND=6
uint32 CTRL_HOVER_COMMAND=7
uint32 CTRL_ARM_COMMAND=8

uint32 CTRL_PLANING_TGT_COMMAND=10

uint32 CTRL_FORMATION_IDLE=11

#Passive hold in master's local frame
uint32 CTRL_FORMATION_HOLD_0=12

#Passive hold in master's natural frame
uint32 CTRL_FORMATION_HOLD_1=13

#Activate fly in master's local frame
uint32 CTRL_FORMATION_FLY_0=14

#Activate fly master's natural frame
uint32 CTRL_FORMATION_FLY_1=15

uint32 CTRL_SPEC_TRAJS=16
uint32 CTRL_MISSION_TRAJS=20

uint32 CTRL_TASK_EXPROLARATION=30

uint32 CTRL_END_MISSION=99


uint32 command_type
#For formation param1 is id
#Param 2 is submodule
#3, 4, 5 is x y z
#Param 6 is yaw

# For POS param1 2 3 is x y z * 10000 
# 4 is yaw*10000 if yaw =666666, then use last yawsp
# 567 is vel feedforward 8 9 10

# For VEL param1 2 3 is x y z * 10000 
# 4 is yaw*10000 if yaw =666666, then use last yawsp

# For ATT 
# param1 2 3 4 is roll pitch yaw vz * 10000 
# 5 (>0 use thrust else z is velz)
# 6 (>0 use yaw else yawrate) 
# For TAKEoff param 1 is takeoff height * 10000
# For arm param = 0 is disarm param>0 is arm
# For mission param1-7 is  mission id

#For Spec traj, 
# param1 is spec traj type 0 is disable. 1 is 8. 
# param2 if enable yaw
# param3 T*10000
# param4 ox * 10000
# param5 oy * 10000
# param6 oz * 10000

int32 param1
int32 param2
int32 param3
int32 param4
int32 param5
int32 param6
int32 param7
int32 param8
int32 param9
int32 param10"""
  # Pseudo-constants
  CTRL_POS_COMMAND = 0
  CTRL_VEL_COMMAND = 1
  CTRL_ATT_COMMAND = 2
  CTRL_MISSION_LOAD_COMMAND = 3
  CTRL_MISSION_END_COMMAND = 4
  CTRL_TAKEOF_COMMAND = 5
  CTRL_LANDING_COMMAND = 6
  CTRL_HOVER_COMMAND = 7
  CTRL_ARM_COMMAND = 8
  CTRL_PLANING_TGT_COMMAND = 10
  CTRL_FORMATION_IDLE = 11
  CTRL_FORMATION_HOLD_0 = 12
  CTRL_FORMATION_HOLD_1 = 13
  CTRL_FORMATION_FLY_0 = 14
  CTRL_FORMATION_FLY_1 = 15
  CTRL_SPEC_TRAJS = 16
  CTRL_MISSION_TRAJS = 20
  CTRL_TASK_EXPROLARATION = 30
  CTRL_END_MISSION = 99

  __slots__ = ['command_type','param1','param2','param3','param4','param5','param6','param7','param8','param9','param10']
  _slot_types = ['uint32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       command_type,param1,param2,param3,param4,param5,param6,param7,param8,param9,param10

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(drone_onboard_command, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.command_type is None:
        self.command_type = 0
      if self.param1 is None:
        self.param1 = 0
      if self.param2 is None:
        self.param2 = 0
      if self.param3 is None:
        self.param3 = 0
      if self.param4 is None:
        self.param4 = 0
      if self.param5 is None:
        self.param5 = 0
      if self.param6 is None:
        self.param6 = 0
      if self.param7 is None:
        self.param7 = 0
      if self.param8 is None:
        self.param8 = 0
      if self.param9 is None:
        self.param9 = 0
      if self.param10 is None:
        self.param10 = 0
    else:
      self.command_type = 0
      self.param1 = 0
      self.param2 = 0
      self.param3 = 0
      self.param4 = 0
      self.param5 = 0
      self.param6 = 0
      self.param7 = 0
      self.param8 = 0
      self.param9 = 0
      self.param10 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_I10i().pack(_x.command_type, _x.param1, _x.param2, _x.param3, _x.param4, _x.param5, _x.param6, _x.param7, _x.param8, _x.param9, _x.param10))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.command_type, _x.param1, _x.param2, _x.param3, _x.param4, _x.param5, _x.param6, _x.param7, _x.param8, _x.param9, _x.param10,) = _get_struct_I10i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_I10i().pack(_x.command_type, _x.param1, _x.param2, _x.param3, _x.param4, _x.param5, _x.param6, _x.param7, _x.param8, _x.param9, _x.param10))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.command_type, _x.param1, _x.param2, _x.param3, _x.param4, _x.param5, _x.param6, _x.param7, _x.param8, _x.param9, _x.param10,) = _get_struct_I10i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I10i = None
def _get_struct_I10i():
    global _struct_I10i
    if _struct_I10i is None:
        _struct_I10i = struct.Struct("<I10i")
    return _struct_I10i
