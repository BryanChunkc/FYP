# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from swarmtal_msgs/drone_pos_control_state.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import sensor_msgs.msg
import std_msgs.msg

class drone_pos_control_state(genpy.Message):
  _md5sum = "1284e85c66442b438c82756d23002796"
  _type = "swarmtal_msgs/drone_pos_control_state"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """Header Header

geometry_msgs/Pose pose
sensor_msgs/Imu imu_data
float32 pitch_cmd
float32 roll_cmd
float32 yaw_cmd
float32 thrust_cmd

float32 pitch
float32 roll
float32 yaw

float32 yaw_sp

geometry_msgs/Vector3 acc_cmd
geometry_msgs/Vector3 vel_cmd
geometry_msgs/Vector3 global_vel

geometry_msgs/Vector3 pos_sp

uint32 ctrl_mode

bool use_fc_yaw

uint64 count

geometry_msgs/Vector3 max_vel
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: sensor_msgs/Imu
# This is a message to hold data from an IMU (Inertial Measurement Unit)
#
# Accelerations should be in m/s^2 (not in g's), and rotational velocity should be in rad/sec
#
# If the covariance of the measurement is known, it should be filled in (if all you know is the 
# variance of each measurement, e.g. from the datasheet, just put those along the diagonal)
# A covariance matrix of all zeros will be interpreted as "covariance unknown", and to use the
# data a covariance will have to be assumed or gotten from some other source
#
# If you have no estimate for one of the data elements (e.g. your IMU doesn't produce an orientation 
# estimate), please set element 0 of the associated covariance matrix to -1
# If you are interpreting this message, please check for a value of -1 in the first element of each 
# covariance matrix, and disregard the associated estimate.

Header header

geometry_msgs/Quaternion orientation
float64[9] orientation_covariance # Row major about x, y, z axes

geometry_msgs/Vector3 angular_velocity
float64[9] angular_velocity_covariance # Row major about x, y, z axes

geometry_msgs/Vector3 linear_acceleration
float64[9] linear_acceleration_covariance # Row major x, y z 

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['Header','pose','imu_data','pitch_cmd','roll_cmd','yaw_cmd','thrust_cmd','pitch','roll','yaw','yaw_sp','acc_cmd','vel_cmd','global_vel','pos_sp','ctrl_mode','use_fc_yaw','count','max_vel']
  _slot_types = ['std_msgs/Header','geometry_msgs/Pose','sensor_msgs/Imu','float32','float32','float32','float32','float32','float32','float32','float32','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','uint32','bool','uint64','geometry_msgs/Vector3']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Header,pose,imu_data,pitch_cmd,roll_cmd,yaw_cmd,thrust_cmd,pitch,roll,yaw,yaw_sp,acc_cmd,vel_cmd,global_vel,pos_sp,ctrl_mode,use_fc_yaw,count,max_vel

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(drone_pos_control_state, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Header is None:
        self.Header = std_msgs.msg.Header()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.imu_data is None:
        self.imu_data = sensor_msgs.msg.Imu()
      if self.pitch_cmd is None:
        self.pitch_cmd = 0.
      if self.roll_cmd is None:
        self.roll_cmd = 0.
      if self.yaw_cmd is None:
        self.yaw_cmd = 0.
      if self.thrust_cmd is None:
        self.thrust_cmd = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.roll is None:
        self.roll = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.yaw_sp is None:
        self.yaw_sp = 0.
      if self.acc_cmd is None:
        self.acc_cmd = geometry_msgs.msg.Vector3()
      if self.vel_cmd is None:
        self.vel_cmd = geometry_msgs.msg.Vector3()
      if self.global_vel is None:
        self.global_vel = geometry_msgs.msg.Vector3()
      if self.pos_sp is None:
        self.pos_sp = geometry_msgs.msg.Vector3()
      if self.ctrl_mode is None:
        self.ctrl_mode = 0
      if self.use_fc_yaw is None:
        self.use_fc_yaw = False
      if self.count is None:
        self.count = 0
      if self.max_vel is None:
        self.max_vel = geometry_msgs.msg.Vector3()
    else:
      self.Header = std_msgs.msg.Header()
      self.pose = geometry_msgs.msg.Pose()
      self.imu_data = sensor_msgs.msg.Imu()
      self.pitch_cmd = 0.
      self.roll_cmd = 0.
      self.yaw_cmd = 0.
      self.thrust_cmd = 0.
      self.pitch = 0.
      self.roll = 0.
      self.yaw = 0.
      self.yaw_sp = 0.
      self.acc_cmd = geometry_msgs.msg.Vector3()
      self.vel_cmd = geometry_msgs.msg.Vector3()
      self.global_vel = geometry_msgs.msg.Vector3()
      self.pos_sp = geometry_msgs.msg.Vector3()
      self.ctrl_mode = 0
      self.use_fc_yaw = False
      self.count = 0
      self.max_vel = geometry_msgs.msg.Vector3()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.Header.seq, _x.Header.stamp.secs, _x.Header.stamp.nsecs))
      _x = self.Header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.imu_data.header.seq, _x.imu_data.header.stamp.secs, _x.imu_data.header.stamp.nsecs))
      _x = self.imu_data.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.imu_data.orientation.x, _x.imu_data.orientation.y, _x.imu_data.orientation.z, _x.imu_data.orientation.w))
      buff.write(_get_struct_9d().pack(*self.imu_data.orientation_covariance))
      _x = self
      buff.write(_get_struct_3d().pack(_x.imu_data.angular_velocity.x, _x.imu_data.angular_velocity.y, _x.imu_data.angular_velocity.z))
      buff.write(_get_struct_9d().pack(*self.imu_data.angular_velocity_covariance))
      _x = self
      buff.write(_get_struct_3d().pack(_x.imu_data.linear_acceleration.x, _x.imu_data.linear_acceleration.y, _x.imu_data.linear_acceleration.z))
      buff.write(_get_struct_9d().pack(*self.imu_data.linear_acceleration_covariance))
      _x = self
      buff.write(_get_struct_8f12dIBQ3d().pack(_x.pitch_cmd, _x.roll_cmd, _x.yaw_cmd, _x.thrust_cmd, _x.pitch, _x.roll, _x.yaw, _x.yaw_sp, _x.acc_cmd.x, _x.acc_cmd.y, _x.acc_cmd.z, _x.vel_cmd.x, _x.vel_cmd.y, _x.vel_cmd.z, _x.global_vel.x, _x.global_vel.y, _x.global_vel.z, _x.pos_sp.x, _x.pos_sp.y, _x.pos_sp.z, _x.ctrl_mode, _x.use_fc_yaw, _x.count, _x.max_vel.x, _x.max_vel.y, _x.max_vel.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.Header is None:
        self.Header = std_msgs.msg.Header()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.imu_data is None:
        self.imu_data = sensor_msgs.msg.Imu()
      if self.acc_cmd is None:
        self.acc_cmd = geometry_msgs.msg.Vector3()
      if self.vel_cmd is None:
        self.vel_cmd = geometry_msgs.msg.Vector3()
      if self.global_vel is None:
        self.global_vel = geometry_msgs.msg.Vector3()
      if self.pos_sp is None:
        self.pos_sp = geometry_msgs.msg.Vector3()
      if self.max_vel is None:
        self.max_vel = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.Header.seq, _x.Header.stamp.secs, _x.Header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.imu_data.header.seq, _x.imu_data.header.stamp.secs, _x.imu_data.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.imu_data.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.imu_data.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.imu_data.orientation.x, _x.imu_data.orientation.y, _x.imu_data.orientation.z, _x.imu_data.orientation.w,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 72
      self.imu_data.orientation_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.imu_data.angular_velocity.x, _x.imu_data.angular_velocity.y, _x.imu_data.angular_velocity.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.imu_data.angular_velocity_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.imu_data.linear_acceleration.x, _x.imu_data.linear_acceleration.y, _x.imu_data.linear_acceleration.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.imu_data.linear_acceleration_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 165
      (_x.pitch_cmd, _x.roll_cmd, _x.yaw_cmd, _x.thrust_cmd, _x.pitch, _x.roll, _x.yaw, _x.yaw_sp, _x.acc_cmd.x, _x.acc_cmd.y, _x.acc_cmd.z, _x.vel_cmd.x, _x.vel_cmd.y, _x.vel_cmd.z, _x.global_vel.x, _x.global_vel.y, _x.global_vel.z, _x.pos_sp.x, _x.pos_sp.y, _x.pos_sp.z, _x.ctrl_mode, _x.use_fc_yaw, _x.count, _x.max_vel.x, _x.max_vel.y, _x.max_vel.z,) = _get_struct_8f12dIBQ3d().unpack(str[start:end])
      self.use_fc_yaw = bool(self.use_fc_yaw)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.Header.seq, _x.Header.stamp.secs, _x.Header.stamp.nsecs))
      _x = self.Header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.imu_data.header.seq, _x.imu_data.header.stamp.secs, _x.imu_data.header.stamp.nsecs))
      _x = self.imu_data.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.imu_data.orientation.x, _x.imu_data.orientation.y, _x.imu_data.orientation.z, _x.imu_data.orientation.w))
      buff.write(self.imu_data.orientation_covariance.tostring())
      _x = self
      buff.write(_get_struct_3d().pack(_x.imu_data.angular_velocity.x, _x.imu_data.angular_velocity.y, _x.imu_data.angular_velocity.z))
      buff.write(self.imu_data.angular_velocity_covariance.tostring())
      _x = self
      buff.write(_get_struct_3d().pack(_x.imu_data.linear_acceleration.x, _x.imu_data.linear_acceleration.y, _x.imu_data.linear_acceleration.z))
      buff.write(self.imu_data.linear_acceleration_covariance.tostring())
      _x = self
      buff.write(_get_struct_8f12dIBQ3d().pack(_x.pitch_cmd, _x.roll_cmd, _x.yaw_cmd, _x.thrust_cmd, _x.pitch, _x.roll, _x.yaw, _x.yaw_sp, _x.acc_cmd.x, _x.acc_cmd.y, _x.acc_cmd.z, _x.vel_cmd.x, _x.vel_cmd.y, _x.vel_cmd.z, _x.global_vel.x, _x.global_vel.y, _x.global_vel.z, _x.pos_sp.x, _x.pos_sp.y, _x.pos_sp.z, _x.ctrl_mode, _x.use_fc_yaw, _x.count, _x.max_vel.x, _x.max_vel.y, _x.max_vel.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.Header is None:
        self.Header = std_msgs.msg.Header()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.imu_data is None:
        self.imu_data = sensor_msgs.msg.Imu()
      if self.acc_cmd is None:
        self.acc_cmd = geometry_msgs.msg.Vector3()
      if self.vel_cmd is None:
        self.vel_cmd = geometry_msgs.msg.Vector3()
      if self.global_vel is None:
        self.global_vel = geometry_msgs.msg.Vector3()
      if self.pos_sp is None:
        self.pos_sp = geometry_msgs.msg.Vector3()
      if self.max_vel is None:
        self.max_vel = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.Header.seq, _x.Header.stamp.secs, _x.Header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.imu_data.header.seq, _x.imu_data.header.stamp.secs, _x.imu_data.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.imu_data.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.imu_data.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.imu_data.orientation.x, _x.imu_data.orientation.y, _x.imu_data.orientation.z, _x.imu_data.orientation.w,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 72
      self.imu_data.orientation_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 24
      (_x.imu_data.angular_velocity.x, _x.imu_data.angular_velocity.y, _x.imu_data.angular_velocity.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.imu_data.angular_velocity_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 24
      (_x.imu_data.linear_acceleration.x, _x.imu_data.linear_acceleration.y, _x.imu_data.linear_acceleration.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.imu_data.linear_acceleration_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 165
      (_x.pitch_cmd, _x.roll_cmd, _x.yaw_cmd, _x.thrust_cmd, _x.pitch, _x.roll, _x.yaw, _x.yaw_sp, _x.acc_cmd.x, _x.acc_cmd.y, _x.acc_cmd.z, _x.vel_cmd.x, _x.vel_cmd.y, _x.vel_cmd.z, _x.global_vel.x, _x.global_vel.y, _x.global_vel.z, _x.pos_sp.x, _x.pos_sp.y, _x.pos_sp.z, _x.ctrl_mode, _x.use_fc_yaw, _x.count, _x.max_vel.x, _x.max_vel.y, _x.max_vel.z,) = _get_struct_8f12dIBQ3d().unpack(str[start:end])
      self.use_fc_yaw = bool(self.use_fc_yaw)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_7d3I = None
def _get_struct_7d3I():
    global _struct_7d3I
    if _struct_7d3I is None:
        _struct_7d3I = struct.Struct("<7d3I")
    return _struct_7d3I
_struct_8f12dIBQ3d = None
def _get_struct_8f12dIBQ3d():
    global _struct_8f12dIBQ3d
    if _struct_8f12dIBQ3d is None:
        _struct_8f12dIBQ3d = struct.Struct("<8f12dIBQ3d")
    return _struct_8f12dIBQ3d
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
