# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from swarmtal_msgs/drone_commander_state.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import sensor_msgs.msg
import std_msgs.msg
import swarmtal_msgs.msg

class drone_commander_state(genpy.Message):
  _md5sum = "95ace68b12ed603a8645498808e5a9bb"
  _type = "swarmtal_msgs/drone_commander_state"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 CTRL_INPUT_NONE=0
uint32 CTRL_INPUT_RC=1
uint32 CTRL_INPUT_ONBOARD=2

uint32 ctrl_input_state


uint32 FLIGHT_STATUS_IDLE=0 # Motor Stopped, on ground
uint32 FLIGHT_STATUS_ARMED=1 # Armed, on ground
uint32 FLIGHT_STATUS_IN_AIR=2 #Armed Inair
uint32 FLIGHT_STATUS_CRASHED=3 # Crashed, Armed

uint32 flight_status

uint32 CTRL_AUTH_RC = 0
uint32 CTRL_AUTH_APP = 1
uint32 CTRL_AUTH_THIS = 2

uint32 control_auth

float64 takeoff_target_height
float64 takeoff_velocity

float32 vo_latency
#0 vo landing
#1 zero attitude landing

uint32 LANDING_MODE_XYVEL = 0
uint32 LANDING_MODE_ATT = 1

uint32 landing_mode
float64 landing_velocity

uint32 CTRL_MODE_IDLE=0
uint32 CTRL_MODE_TAKEOFF=1
uint32 CTRL_MODE_LANDING=2
uint32 CTRL_MODE_HOVER=3
uint32 CTRL_MODE_POSVEL=4
uint32 CTRL_MODE_ATT=5
uint32 CTRL_MODE_MISSION=6

uint32 commander_ctrl_mode

float32 bat_vol
float32 bat_remain

bool is_armed
bool rc_valid
bool onboard_cmd_valid
bool vo_valid
bool djisdk_valid

geometry_msgs/Point pos
geometry_msgs/Point vel
float64 yaw

drone_pos_ctrl_cmd ctrl_cmd

sensor_msgs/Imu imu_data
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: swarmtal_msgs/drone_pos_ctrl_cmd
uint32 CTRL_CMD_IDLE_MODE = 0
uint32 CTRL_CMD_VEL_MODE  = 1
uint32 CTRL_CMD_POS_MODE  = 2
uint32 CTRL_CMD_ATT_THRUST_MODE  = 3
uint32 CTRL_CMD_ATT_VELZ_MODE  = 4

uint32 ctrl_mode

geometry_msgs/Vector3 pos_sp
geometry_msgs/Vector3 vel_sp
geometry_msgs/Vector3 acc_sp
geometry_msgs/Quaternion att_sp
float64 yaw_sp
float64 z_sp

bool use_fc_yaw

geometry_msgs/Vector3 max_vel
================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: sensor_msgs/Imu
# This is a message to hold data from an IMU (Inertial Measurement Unit)
#
# Accelerations should be in m/s^2 (not in g's), and rotational velocity should be in rad/sec
#
# If the covariance of the measurement is known, it should be filled in (if all you know is the 
# variance of each measurement, e.g. from the datasheet, just put those along the diagonal)
# A covariance matrix of all zeros will be interpreted as "covariance unknown", and to use the
# data a covariance will have to be assumed or gotten from some other source
#
# If you have no estimate for one of the data elements (e.g. your IMU doesn't produce an orientation 
# estimate), please set element 0 of the associated covariance matrix to -1
# If you are interpreting this message, please check for a value of -1 in the first element of each 
# covariance matrix, and disregard the associated estimate.

Header header

geometry_msgs/Quaternion orientation
float64[9] orientation_covariance # Row major about x, y, z axes

geometry_msgs/Vector3 angular_velocity
float64[9] angular_velocity_covariance # Row major about x, y, z axes

geometry_msgs/Vector3 linear_acceleration
float64[9] linear_acceleration_covariance # Row major x, y z 

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  # Pseudo-constants
  CTRL_INPUT_NONE = 0
  CTRL_INPUT_RC = 1
  CTRL_INPUT_ONBOARD = 2
  FLIGHT_STATUS_IDLE = 0
  FLIGHT_STATUS_ARMED = 1
  FLIGHT_STATUS_IN_AIR = 2
  FLIGHT_STATUS_CRASHED = 3
  CTRL_AUTH_RC = 0
  CTRL_AUTH_APP = 1
  CTRL_AUTH_THIS = 2
  LANDING_MODE_XYVEL = 0
  LANDING_MODE_ATT = 1
  CTRL_MODE_IDLE = 0
  CTRL_MODE_TAKEOFF = 1
  CTRL_MODE_LANDING = 2
  CTRL_MODE_HOVER = 3
  CTRL_MODE_POSVEL = 4
  CTRL_MODE_ATT = 5
  CTRL_MODE_MISSION = 6

  __slots__ = ['ctrl_input_state','flight_status','control_auth','takeoff_target_height','takeoff_velocity','vo_latency','landing_mode','landing_velocity','commander_ctrl_mode','bat_vol','bat_remain','is_armed','rc_valid','onboard_cmd_valid','vo_valid','djisdk_valid','pos','vel','yaw','ctrl_cmd','imu_data']
  _slot_types = ['uint32','uint32','uint32','float64','float64','float32','uint32','float64','uint32','float32','float32','bool','bool','bool','bool','bool','geometry_msgs/Point','geometry_msgs/Point','float64','swarmtal_msgs/drone_pos_ctrl_cmd','sensor_msgs/Imu']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ctrl_input_state,flight_status,control_auth,takeoff_target_height,takeoff_velocity,vo_latency,landing_mode,landing_velocity,commander_ctrl_mode,bat_vol,bat_remain,is_armed,rc_valid,onboard_cmd_valid,vo_valid,djisdk_valid,pos,vel,yaw,ctrl_cmd,imu_data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(drone_commander_state, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ctrl_input_state is None:
        self.ctrl_input_state = 0
      if self.flight_status is None:
        self.flight_status = 0
      if self.control_auth is None:
        self.control_auth = 0
      if self.takeoff_target_height is None:
        self.takeoff_target_height = 0.
      if self.takeoff_velocity is None:
        self.takeoff_velocity = 0.
      if self.vo_latency is None:
        self.vo_latency = 0.
      if self.landing_mode is None:
        self.landing_mode = 0
      if self.landing_velocity is None:
        self.landing_velocity = 0.
      if self.commander_ctrl_mode is None:
        self.commander_ctrl_mode = 0
      if self.bat_vol is None:
        self.bat_vol = 0.
      if self.bat_remain is None:
        self.bat_remain = 0.
      if self.is_armed is None:
        self.is_armed = False
      if self.rc_valid is None:
        self.rc_valid = False
      if self.onboard_cmd_valid is None:
        self.onboard_cmd_valid = False
      if self.vo_valid is None:
        self.vo_valid = False
      if self.djisdk_valid is None:
        self.djisdk_valid = False
      if self.pos is None:
        self.pos = geometry_msgs.msg.Point()
      if self.vel is None:
        self.vel = geometry_msgs.msg.Point()
      if self.yaw is None:
        self.yaw = 0.
      if self.ctrl_cmd is None:
        self.ctrl_cmd = swarmtal_msgs.msg.drone_pos_ctrl_cmd()
      if self.imu_data is None:
        self.imu_data = sensor_msgs.msg.Imu()
    else:
      self.ctrl_input_state = 0
      self.flight_status = 0
      self.control_auth = 0
      self.takeoff_target_height = 0.
      self.takeoff_velocity = 0.
      self.vo_latency = 0.
      self.landing_mode = 0
      self.landing_velocity = 0.
      self.commander_ctrl_mode = 0
      self.bat_vol = 0.
      self.bat_remain = 0.
      self.is_armed = False
      self.rc_valid = False
      self.onboard_cmd_valid = False
      self.vo_valid = False
      self.djisdk_valid = False
      self.pos = geometry_msgs.msg.Point()
      self.vel = geometry_msgs.msg.Point()
      self.yaw = 0.
      self.ctrl_cmd = swarmtal_msgs.msg.drone_pos_ctrl_cmd()
      self.imu_data = sensor_msgs.msg.Imu()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I2dfIdI2f5B7dI15dB3d3I().pack(_x.ctrl_input_state, _x.flight_status, _x.control_auth, _x.takeoff_target_height, _x.takeoff_velocity, _x.vo_latency, _x.landing_mode, _x.landing_velocity, _x.commander_ctrl_mode, _x.bat_vol, _x.bat_remain, _x.is_armed, _x.rc_valid, _x.onboard_cmd_valid, _x.vo_valid, _x.djisdk_valid, _x.pos.x, _x.pos.y, _x.pos.z, _x.vel.x, _x.vel.y, _x.vel.z, _x.yaw, _x.ctrl_cmd.ctrl_mode, _x.ctrl_cmd.pos_sp.x, _x.ctrl_cmd.pos_sp.y, _x.ctrl_cmd.pos_sp.z, _x.ctrl_cmd.vel_sp.x, _x.ctrl_cmd.vel_sp.y, _x.ctrl_cmd.vel_sp.z, _x.ctrl_cmd.acc_sp.x, _x.ctrl_cmd.acc_sp.y, _x.ctrl_cmd.acc_sp.z, _x.ctrl_cmd.att_sp.x, _x.ctrl_cmd.att_sp.y, _x.ctrl_cmd.att_sp.z, _x.ctrl_cmd.att_sp.w, _x.ctrl_cmd.yaw_sp, _x.ctrl_cmd.z_sp, _x.ctrl_cmd.use_fc_yaw, _x.ctrl_cmd.max_vel.x, _x.ctrl_cmd.max_vel.y, _x.ctrl_cmd.max_vel.z, _x.imu_data.header.seq, _x.imu_data.header.stamp.secs, _x.imu_data.header.stamp.nsecs))
      _x = self.imu_data.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.imu_data.orientation.x, _x.imu_data.orientation.y, _x.imu_data.orientation.z, _x.imu_data.orientation.w))
      buff.write(_get_struct_9d().pack(*self.imu_data.orientation_covariance))
      _x = self
      buff.write(_get_struct_3d().pack(_x.imu_data.angular_velocity.x, _x.imu_data.angular_velocity.y, _x.imu_data.angular_velocity.z))
      buff.write(_get_struct_9d().pack(*self.imu_data.angular_velocity_covariance))
      _x = self
      buff.write(_get_struct_3d().pack(_x.imu_data.linear_acceleration.x, _x.imu_data.linear_acceleration.y, _x.imu_data.linear_acceleration.z))
      buff.write(_get_struct_9d().pack(*self.imu_data.linear_acceleration_covariance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pos is None:
        self.pos = geometry_msgs.msg.Point()
      if self.vel is None:
        self.vel = geometry_msgs.msg.Point()
      if self.ctrl_cmd is None:
        self.ctrl_cmd = swarmtal_msgs.msg.drone_pos_ctrl_cmd()
      if self.imu_data is None:
        self.imu_data = sensor_msgs.msg.Imu()
      end = 0
      _x = self
      start = end
      end += 278
      (_x.ctrl_input_state, _x.flight_status, _x.control_auth, _x.takeoff_target_height, _x.takeoff_velocity, _x.vo_latency, _x.landing_mode, _x.landing_velocity, _x.commander_ctrl_mode, _x.bat_vol, _x.bat_remain, _x.is_armed, _x.rc_valid, _x.onboard_cmd_valid, _x.vo_valid, _x.djisdk_valid, _x.pos.x, _x.pos.y, _x.pos.z, _x.vel.x, _x.vel.y, _x.vel.z, _x.yaw, _x.ctrl_cmd.ctrl_mode, _x.ctrl_cmd.pos_sp.x, _x.ctrl_cmd.pos_sp.y, _x.ctrl_cmd.pos_sp.z, _x.ctrl_cmd.vel_sp.x, _x.ctrl_cmd.vel_sp.y, _x.ctrl_cmd.vel_sp.z, _x.ctrl_cmd.acc_sp.x, _x.ctrl_cmd.acc_sp.y, _x.ctrl_cmd.acc_sp.z, _x.ctrl_cmd.att_sp.x, _x.ctrl_cmd.att_sp.y, _x.ctrl_cmd.att_sp.z, _x.ctrl_cmd.att_sp.w, _x.ctrl_cmd.yaw_sp, _x.ctrl_cmd.z_sp, _x.ctrl_cmd.use_fc_yaw, _x.ctrl_cmd.max_vel.x, _x.ctrl_cmd.max_vel.y, _x.ctrl_cmd.max_vel.z, _x.imu_data.header.seq, _x.imu_data.header.stamp.secs, _x.imu_data.header.stamp.nsecs,) = _get_struct_3I2dfIdI2f5B7dI15dB3d3I().unpack(str[start:end])
      self.is_armed = bool(self.is_armed)
      self.rc_valid = bool(self.rc_valid)
      self.onboard_cmd_valid = bool(self.onboard_cmd_valid)
      self.vo_valid = bool(self.vo_valid)
      self.djisdk_valid = bool(self.djisdk_valid)
      self.ctrl_cmd.use_fc_yaw = bool(self.ctrl_cmd.use_fc_yaw)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.imu_data.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.imu_data.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.imu_data.orientation.x, _x.imu_data.orientation.y, _x.imu_data.orientation.z, _x.imu_data.orientation.w,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 72
      self.imu_data.orientation_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.imu_data.angular_velocity.x, _x.imu_data.angular_velocity.y, _x.imu_data.angular_velocity.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.imu_data.angular_velocity_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.imu_data.linear_acceleration.x, _x.imu_data.linear_acceleration.y, _x.imu_data.linear_acceleration.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.imu_data.linear_acceleration_covariance = _get_struct_9d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I2dfIdI2f5B7dI15dB3d3I().pack(_x.ctrl_input_state, _x.flight_status, _x.control_auth, _x.takeoff_target_height, _x.takeoff_velocity, _x.vo_latency, _x.landing_mode, _x.landing_velocity, _x.commander_ctrl_mode, _x.bat_vol, _x.bat_remain, _x.is_armed, _x.rc_valid, _x.onboard_cmd_valid, _x.vo_valid, _x.djisdk_valid, _x.pos.x, _x.pos.y, _x.pos.z, _x.vel.x, _x.vel.y, _x.vel.z, _x.yaw, _x.ctrl_cmd.ctrl_mode, _x.ctrl_cmd.pos_sp.x, _x.ctrl_cmd.pos_sp.y, _x.ctrl_cmd.pos_sp.z, _x.ctrl_cmd.vel_sp.x, _x.ctrl_cmd.vel_sp.y, _x.ctrl_cmd.vel_sp.z, _x.ctrl_cmd.acc_sp.x, _x.ctrl_cmd.acc_sp.y, _x.ctrl_cmd.acc_sp.z, _x.ctrl_cmd.att_sp.x, _x.ctrl_cmd.att_sp.y, _x.ctrl_cmd.att_sp.z, _x.ctrl_cmd.att_sp.w, _x.ctrl_cmd.yaw_sp, _x.ctrl_cmd.z_sp, _x.ctrl_cmd.use_fc_yaw, _x.ctrl_cmd.max_vel.x, _x.ctrl_cmd.max_vel.y, _x.ctrl_cmd.max_vel.z, _x.imu_data.header.seq, _x.imu_data.header.stamp.secs, _x.imu_data.header.stamp.nsecs))
      _x = self.imu_data.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.imu_data.orientation.x, _x.imu_data.orientation.y, _x.imu_data.orientation.z, _x.imu_data.orientation.w))
      buff.write(self.imu_data.orientation_covariance.tostring())
      _x = self
      buff.write(_get_struct_3d().pack(_x.imu_data.angular_velocity.x, _x.imu_data.angular_velocity.y, _x.imu_data.angular_velocity.z))
      buff.write(self.imu_data.angular_velocity_covariance.tostring())
      _x = self
      buff.write(_get_struct_3d().pack(_x.imu_data.linear_acceleration.x, _x.imu_data.linear_acceleration.y, _x.imu_data.linear_acceleration.z))
      buff.write(self.imu_data.linear_acceleration_covariance.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pos is None:
        self.pos = geometry_msgs.msg.Point()
      if self.vel is None:
        self.vel = geometry_msgs.msg.Point()
      if self.ctrl_cmd is None:
        self.ctrl_cmd = swarmtal_msgs.msg.drone_pos_ctrl_cmd()
      if self.imu_data is None:
        self.imu_data = sensor_msgs.msg.Imu()
      end = 0
      _x = self
      start = end
      end += 278
      (_x.ctrl_input_state, _x.flight_status, _x.control_auth, _x.takeoff_target_height, _x.takeoff_velocity, _x.vo_latency, _x.landing_mode, _x.landing_velocity, _x.commander_ctrl_mode, _x.bat_vol, _x.bat_remain, _x.is_armed, _x.rc_valid, _x.onboard_cmd_valid, _x.vo_valid, _x.djisdk_valid, _x.pos.x, _x.pos.y, _x.pos.z, _x.vel.x, _x.vel.y, _x.vel.z, _x.yaw, _x.ctrl_cmd.ctrl_mode, _x.ctrl_cmd.pos_sp.x, _x.ctrl_cmd.pos_sp.y, _x.ctrl_cmd.pos_sp.z, _x.ctrl_cmd.vel_sp.x, _x.ctrl_cmd.vel_sp.y, _x.ctrl_cmd.vel_sp.z, _x.ctrl_cmd.acc_sp.x, _x.ctrl_cmd.acc_sp.y, _x.ctrl_cmd.acc_sp.z, _x.ctrl_cmd.att_sp.x, _x.ctrl_cmd.att_sp.y, _x.ctrl_cmd.att_sp.z, _x.ctrl_cmd.att_sp.w, _x.ctrl_cmd.yaw_sp, _x.ctrl_cmd.z_sp, _x.ctrl_cmd.use_fc_yaw, _x.ctrl_cmd.max_vel.x, _x.ctrl_cmd.max_vel.y, _x.ctrl_cmd.max_vel.z, _x.imu_data.header.seq, _x.imu_data.header.stamp.secs, _x.imu_data.header.stamp.nsecs,) = _get_struct_3I2dfIdI2f5B7dI15dB3d3I().unpack(str[start:end])
      self.is_armed = bool(self.is_armed)
      self.rc_valid = bool(self.rc_valid)
      self.onboard_cmd_valid = bool(self.onboard_cmd_valid)
      self.vo_valid = bool(self.vo_valid)
      self.djisdk_valid = bool(self.djisdk_valid)
      self.ctrl_cmd.use_fc_yaw = bool(self.ctrl_cmd.use_fc_yaw)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.imu_data.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.imu_data.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.imu_data.orientation.x, _x.imu_data.orientation.y, _x.imu_data.orientation.z, _x.imu_data.orientation.w,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 72
      self.imu_data.orientation_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 24
      (_x.imu_data.angular_velocity.x, _x.imu_data.angular_velocity.y, _x.imu_data.angular_velocity.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.imu_data.angular_velocity_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 24
      (_x.imu_data.linear_acceleration.x, _x.imu_data.linear_acceleration.y, _x.imu_data.linear_acceleration.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.imu_data.linear_acceleration_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I2dfIdI2f5B7dI15dB3d3I = None
def _get_struct_3I2dfIdI2f5B7dI15dB3d3I():
    global _struct_3I2dfIdI2f5B7dI15dB3d3I
    if _struct_3I2dfIdI2f5B7dI15dB3d3I is None:
        _struct_3I2dfIdI2f5B7dI15dB3d3I = struct.Struct("<3I2dfIdI2f5B7dI15dB3d3I")
    return _struct_3I2dfIdI2f5B7dI15dB3d3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
