// Generated by gencpp from file swarmtal_msgs/drone_pos_control_state.msg
// DO NOT EDIT!


#ifndef SWARMTAL_MSGS_MESSAGE_DRONE_POS_CONTROL_STATE_H
#define SWARMTAL_MSGS_MESSAGE_DRONE_POS_CONTROL_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>
#include <sensor_msgs/Imu.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace swarmtal_msgs
{
template <class ContainerAllocator>
struct drone_pos_control_state_
{
  typedef drone_pos_control_state_<ContainerAllocator> Type;

  drone_pos_control_state_()
    : Header()
    , pose()
    , imu_data()
    , pitch_cmd(0.0)
    , roll_cmd(0.0)
    , yaw_cmd(0.0)
    , thrust_cmd(0.0)
    , pitch(0.0)
    , roll(0.0)
    , yaw(0.0)
    , yaw_sp(0.0)
    , acc_cmd()
    , vel_cmd()
    , global_vel()
    , pos_sp()
    , ctrl_mode(0)
    , use_fc_yaw(false)
    , count(0)
    , max_vel()  {
    }
  drone_pos_control_state_(const ContainerAllocator& _alloc)
    : Header(_alloc)
    , pose(_alloc)
    , imu_data(_alloc)
    , pitch_cmd(0.0)
    , roll_cmd(0.0)
    , yaw_cmd(0.0)
    , thrust_cmd(0.0)
    , pitch(0.0)
    , roll(0.0)
    , yaw(0.0)
    , yaw_sp(0.0)
    , acc_cmd(_alloc)
    , vel_cmd(_alloc)
    , global_vel(_alloc)
    , pos_sp(_alloc)
    , ctrl_mode(0)
    , use_fc_yaw(false)
    , count(0)
    , max_vel(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _Header_type;
  _Header_type Header;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::sensor_msgs::Imu_<ContainerAllocator>  _imu_data_type;
  _imu_data_type imu_data;

   typedef float _pitch_cmd_type;
  _pitch_cmd_type pitch_cmd;

   typedef float _roll_cmd_type;
  _roll_cmd_type roll_cmd;

   typedef float _yaw_cmd_type;
  _yaw_cmd_type yaw_cmd;

   typedef float _thrust_cmd_type;
  _thrust_cmd_type thrust_cmd;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _roll_type;
  _roll_type roll;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _yaw_sp_type;
  _yaw_sp_type yaw_sp;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _acc_cmd_type;
  _acc_cmd_type acc_cmd;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _vel_cmd_type;
  _vel_cmd_type vel_cmd;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _global_vel_type;
  _global_vel_type global_vel;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _pos_sp_type;
  _pos_sp_type pos_sp;

   typedef uint32_t _ctrl_mode_type;
  _ctrl_mode_type ctrl_mode;

   typedef uint8_t _use_fc_yaw_type;
  _use_fc_yaw_type use_fc_yaw;

   typedef uint64_t _count_type;
  _count_type count;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _max_vel_type;
  _max_vel_type max_vel;





  typedef boost::shared_ptr< ::swarmtal_msgs::drone_pos_control_state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::swarmtal_msgs::drone_pos_control_state_<ContainerAllocator> const> ConstPtr;

}; // struct drone_pos_control_state_

typedef ::swarmtal_msgs::drone_pos_control_state_<std::allocator<void> > drone_pos_control_state;

typedef boost::shared_ptr< ::swarmtal_msgs::drone_pos_control_state > drone_pos_control_statePtr;
typedef boost::shared_ptr< ::swarmtal_msgs::drone_pos_control_state const> drone_pos_control_stateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::swarmtal_msgs::drone_pos_control_state_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::swarmtal_msgs::drone_pos_control_state_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::swarmtal_msgs::drone_pos_control_state_<ContainerAllocator1> & lhs, const ::swarmtal_msgs::drone_pos_control_state_<ContainerAllocator2> & rhs)
{
  return lhs.Header == rhs.Header &&
    lhs.pose == rhs.pose &&
    lhs.imu_data == rhs.imu_data &&
    lhs.pitch_cmd == rhs.pitch_cmd &&
    lhs.roll_cmd == rhs.roll_cmd &&
    lhs.yaw_cmd == rhs.yaw_cmd &&
    lhs.thrust_cmd == rhs.thrust_cmd &&
    lhs.pitch == rhs.pitch &&
    lhs.roll == rhs.roll &&
    lhs.yaw == rhs.yaw &&
    lhs.yaw_sp == rhs.yaw_sp &&
    lhs.acc_cmd == rhs.acc_cmd &&
    lhs.vel_cmd == rhs.vel_cmd &&
    lhs.global_vel == rhs.global_vel &&
    lhs.pos_sp == rhs.pos_sp &&
    lhs.ctrl_mode == rhs.ctrl_mode &&
    lhs.use_fc_yaw == rhs.use_fc_yaw &&
    lhs.count == rhs.count &&
    lhs.max_vel == rhs.max_vel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::swarmtal_msgs::drone_pos_control_state_<ContainerAllocator1> & lhs, const ::swarmtal_msgs::drone_pos_control_state_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace swarmtal_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::swarmtal_msgs::drone_pos_control_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::swarmtal_msgs::drone_pos_control_state_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::swarmtal_msgs::drone_pos_control_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::swarmtal_msgs::drone_pos_control_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swarmtal_msgs::drone_pos_control_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swarmtal_msgs::drone_pos_control_state_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::swarmtal_msgs::drone_pos_control_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1284e85c66442b438c82756d23002796";
  }

  static const char* value(const ::swarmtal_msgs::drone_pos_control_state_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1284e85c66442b43ULL;
  static const uint64_t static_value2 = 0x8c82756d23002796ULL;
};

template<class ContainerAllocator>
struct DataType< ::swarmtal_msgs::drone_pos_control_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "swarmtal_msgs/drone_pos_control_state";
  }

  static const char* value(const ::swarmtal_msgs::drone_pos_control_state_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::swarmtal_msgs::drone_pos_control_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header Header\n"
"\n"
"geometry_msgs/Pose pose\n"
"sensor_msgs/Imu imu_data\n"
"float32 pitch_cmd\n"
"float32 roll_cmd\n"
"float32 yaw_cmd\n"
"float32 thrust_cmd\n"
"\n"
"float32 pitch\n"
"float32 roll\n"
"float32 yaw\n"
"\n"
"float32 yaw_sp\n"
"\n"
"geometry_msgs/Vector3 acc_cmd\n"
"geometry_msgs/Vector3 vel_cmd\n"
"geometry_msgs/Vector3 global_vel\n"
"\n"
"geometry_msgs/Vector3 pos_sp\n"
"\n"
"uint32 ctrl_mode\n"
"\n"
"bool use_fc_yaw\n"
"\n"
"uint64 count\n"
"\n"
"geometry_msgs/Vector3 max_vel\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/Imu\n"
"# This is a message to hold data from an IMU (Inertial Measurement Unit)\n"
"#\n"
"# Accelerations should be in m/s^2 (not in g's), and rotational velocity should be in rad/sec\n"
"#\n"
"# If the covariance of the measurement is known, it should be filled in (if all you know is the \n"
"# variance of each measurement, e.g. from the datasheet, just put those along the diagonal)\n"
"# A covariance matrix of all zeros will be interpreted as \"covariance unknown\", and to use the\n"
"# data a covariance will have to be assumed or gotten from some other source\n"
"#\n"
"# If you have no estimate for one of the data elements (e.g. your IMU doesn't produce an orientation \n"
"# estimate), please set element 0 of the associated covariance matrix to -1\n"
"# If you are interpreting this message, please check for a value of -1 in the first element of each \n"
"# covariance matrix, and disregard the associated estimate.\n"
"\n"
"Header header\n"
"\n"
"geometry_msgs/Quaternion orientation\n"
"float64[9] orientation_covariance # Row major about x, y, z axes\n"
"\n"
"geometry_msgs/Vector3 angular_velocity\n"
"float64[9] angular_velocity_covariance # Row major about x, y, z axes\n"
"\n"
"geometry_msgs/Vector3 linear_acceleration\n"
"float64[9] linear_acceleration_covariance # Row major x, y z \n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::swarmtal_msgs::drone_pos_control_state_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::swarmtal_msgs::drone_pos_control_state_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Header);
      stream.next(m.pose);
      stream.next(m.imu_data);
      stream.next(m.pitch_cmd);
      stream.next(m.roll_cmd);
      stream.next(m.yaw_cmd);
      stream.next(m.thrust_cmd);
      stream.next(m.pitch);
      stream.next(m.roll);
      stream.next(m.yaw);
      stream.next(m.yaw_sp);
      stream.next(m.acc_cmd);
      stream.next(m.vel_cmd);
      stream.next(m.global_vel);
      stream.next(m.pos_sp);
      stream.next(m.ctrl_mode);
      stream.next(m.use_fc_yaw);
      stream.next(m.count);
      stream.next(m.max_vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct drone_pos_control_state_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::swarmtal_msgs::drone_pos_control_state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::swarmtal_msgs::drone_pos_control_state_<ContainerAllocator>& v)
  {
    s << indent << "Header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.Header);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "imu_data: ";
    s << std::endl;
    Printer< ::sensor_msgs::Imu_<ContainerAllocator> >::stream(s, indent + "  ", v.imu_data);
    s << indent << "pitch_cmd: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_cmd);
    s << indent << "roll_cmd: ";
    Printer<float>::stream(s, indent + "  ", v.roll_cmd);
    s << indent << "yaw_cmd: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_cmd);
    s << indent << "thrust_cmd: ";
    Printer<float>::stream(s, indent + "  ", v.thrust_cmd);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "yaw_sp: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_sp);
    s << indent << "acc_cmd: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.acc_cmd);
    s << indent << "vel_cmd: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.vel_cmd);
    s << indent << "global_vel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.global_vel);
    s << indent << "pos_sp: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.pos_sp);
    s << indent << "ctrl_mode: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ctrl_mode);
    s << indent << "use_fc_yaw: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.use_fc_yaw);
    s << indent << "count: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.count);
    s << indent << "max_vel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.max_vel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SWARMTAL_MSGS_MESSAGE_DRONE_POS_CONTROL_STATE_H
