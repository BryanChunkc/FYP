// Generated by gencpp from file swarmtal_msgs/drone_pos_ctrl_cmd.msg
// DO NOT EDIT!


#ifndef SWARMTAL_MSGS_MESSAGE_DRONE_POS_CTRL_CMD_H
#define SWARMTAL_MSGS_MESSAGE_DRONE_POS_CTRL_CMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Quaternion.h>
#include <geometry_msgs/Vector3.h>

namespace swarmtal_msgs
{
template <class ContainerAllocator>
struct drone_pos_ctrl_cmd_
{
  typedef drone_pos_ctrl_cmd_<ContainerAllocator> Type;

  drone_pos_ctrl_cmd_()
    : ctrl_mode(0)
    , pos_sp()
    , vel_sp()
    , acc_sp()
    , att_sp()
    , yaw_sp(0.0)
    , z_sp(0.0)
    , use_fc_yaw(false)
    , max_vel()  {
    }
  drone_pos_ctrl_cmd_(const ContainerAllocator& _alloc)
    : ctrl_mode(0)
    , pos_sp(_alloc)
    , vel_sp(_alloc)
    , acc_sp(_alloc)
    , att_sp(_alloc)
    , yaw_sp(0.0)
    , z_sp(0.0)
    , use_fc_yaw(false)
    , max_vel(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _ctrl_mode_type;
  _ctrl_mode_type ctrl_mode;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _pos_sp_type;
  _pos_sp_type pos_sp;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _vel_sp_type;
  _vel_sp_type vel_sp;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _acc_sp_type;
  _acc_sp_type acc_sp;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _att_sp_type;
  _att_sp_type att_sp;

   typedef double _yaw_sp_type;
  _yaw_sp_type yaw_sp;

   typedef double _z_sp_type;
  _z_sp_type z_sp;

   typedef uint8_t _use_fc_yaw_type;
  _use_fc_yaw_type use_fc_yaw;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _max_vel_type;
  _max_vel_type max_vel;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(CTRL_CMD_IDLE_MODE)
  #undef CTRL_CMD_IDLE_MODE
#endif
#if defined(_WIN32) && defined(CTRL_CMD_VEL_MODE)
  #undef CTRL_CMD_VEL_MODE
#endif
#if defined(_WIN32) && defined(CTRL_CMD_POS_MODE)
  #undef CTRL_CMD_POS_MODE
#endif
#if defined(_WIN32) && defined(CTRL_CMD_ATT_THRUST_MODE)
  #undef CTRL_CMD_ATT_THRUST_MODE
#endif
#if defined(_WIN32) && defined(CTRL_CMD_ATT_VELZ_MODE)
  #undef CTRL_CMD_ATT_VELZ_MODE
#endif

  enum {
    CTRL_CMD_IDLE_MODE = 0u,
    CTRL_CMD_VEL_MODE = 1u,
    CTRL_CMD_POS_MODE = 2u,
    CTRL_CMD_ATT_THRUST_MODE = 3u,
    CTRL_CMD_ATT_VELZ_MODE = 4u,
  };


  typedef boost::shared_ptr< ::swarmtal_msgs::drone_pos_ctrl_cmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::swarmtal_msgs::drone_pos_ctrl_cmd_<ContainerAllocator> const> ConstPtr;

}; // struct drone_pos_ctrl_cmd_

typedef ::swarmtal_msgs::drone_pos_ctrl_cmd_<std::allocator<void> > drone_pos_ctrl_cmd;

typedef boost::shared_ptr< ::swarmtal_msgs::drone_pos_ctrl_cmd > drone_pos_ctrl_cmdPtr;
typedef boost::shared_ptr< ::swarmtal_msgs::drone_pos_ctrl_cmd const> drone_pos_ctrl_cmdConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::swarmtal_msgs::drone_pos_ctrl_cmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::swarmtal_msgs::drone_pos_ctrl_cmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::swarmtal_msgs::drone_pos_ctrl_cmd_<ContainerAllocator1> & lhs, const ::swarmtal_msgs::drone_pos_ctrl_cmd_<ContainerAllocator2> & rhs)
{
  return lhs.ctrl_mode == rhs.ctrl_mode &&
    lhs.pos_sp == rhs.pos_sp &&
    lhs.vel_sp == rhs.vel_sp &&
    lhs.acc_sp == rhs.acc_sp &&
    lhs.att_sp == rhs.att_sp &&
    lhs.yaw_sp == rhs.yaw_sp &&
    lhs.z_sp == rhs.z_sp &&
    lhs.use_fc_yaw == rhs.use_fc_yaw &&
    lhs.max_vel == rhs.max_vel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::swarmtal_msgs::drone_pos_ctrl_cmd_<ContainerAllocator1> & lhs, const ::swarmtal_msgs::drone_pos_ctrl_cmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace swarmtal_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::swarmtal_msgs::drone_pos_ctrl_cmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::swarmtal_msgs::drone_pos_ctrl_cmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::swarmtal_msgs::drone_pos_ctrl_cmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::swarmtal_msgs::drone_pos_ctrl_cmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swarmtal_msgs::drone_pos_ctrl_cmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swarmtal_msgs::drone_pos_ctrl_cmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::swarmtal_msgs::drone_pos_ctrl_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "af8791618f25096214834155fb70f593";
  }

  static const char* value(const ::swarmtal_msgs::drone_pos_ctrl_cmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaf8791618f250962ULL;
  static const uint64_t static_value2 = 0x14834155fb70f593ULL;
};

template<class ContainerAllocator>
struct DataType< ::swarmtal_msgs::drone_pos_ctrl_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "swarmtal_msgs/drone_pos_ctrl_cmd";
  }

  static const char* value(const ::swarmtal_msgs::drone_pos_ctrl_cmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::swarmtal_msgs::drone_pos_ctrl_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 CTRL_CMD_IDLE_MODE = 0\n"
"uint32 CTRL_CMD_VEL_MODE  = 1\n"
"uint32 CTRL_CMD_POS_MODE  = 2\n"
"uint32 CTRL_CMD_ATT_THRUST_MODE  = 3\n"
"uint32 CTRL_CMD_ATT_VELZ_MODE  = 4\n"
"\n"
"uint32 ctrl_mode\n"
"\n"
"geometry_msgs/Vector3 pos_sp\n"
"geometry_msgs/Vector3 vel_sp\n"
"geometry_msgs/Vector3 acc_sp\n"
"geometry_msgs/Quaternion att_sp\n"
"float64 yaw_sp\n"
"float64 z_sp\n"
"\n"
"bool use_fc_yaw\n"
"\n"
"geometry_msgs/Vector3 max_vel\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::swarmtal_msgs::drone_pos_ctrl_cmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::swarmtal_msgs::drone_pos_ctrl_cmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ctrl_mode);
      stream.next(m.pos_sp);
      stream.next(m.vel_sp);
      stream.next(m.acc_sp);
      stream.next(m.att_sp);
      stream.next(m.yaw_sp);
      stream.next(m.z_sp);
      stream.next(m.use_fc_yaw);
      stream.next(m.max_vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct drone_pos_ctrl_cmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::swarmtal_msgs::drone_pos_ctrl_cmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::swarmtal_msgs::drone_pos_ctrl_cmd_<ContainerAllocator>& v)
  {
    s << indent << "ctrl_mode: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ctrl_mode);
    s << indent << "pos_sp: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.pos_sp);
    s << indent << "vel_sp: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.vel_sp);
    s << indent << "acc_sp: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.acc_sp);
    s << indent << "att_sp: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.att_sp);
    s << indent << "yaw_sp: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_sp);
    s << indent << "z_sp: ";
    Printer<double>::stream(s, indent + "  ", v.z_sp);
    s << indent << "use_fc_yaw: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.use_fc_yaw);
    s << indent << "max_vel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.max_vel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SWARMTAL_MSGS_MESSAGE_DRONE_POS_CTRL_CMD_H
